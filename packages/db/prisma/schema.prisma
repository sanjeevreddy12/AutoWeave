// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id                      Int  @id @default(autoincrement())
  name                    String
  email                   String @unique
  password                String
  verificationToken       String?
  verificationTokenExpiry DateTime?
  isVerified              Boolean @default(false)

  resetToken              String?
  resetTokenExpiry        DateTime?

  createdAt               DateTime @default(now())
  updateAt                DateTime? @updatedAt
  zaps                     Zap[]
  

  GmailAuth GmailAuth[]
}

model GmailAuth {
   id            String   @id @default(cuid())
  userId        Int   // Link to user
  accessToken   String   @db.Text  // Store OAuth access token
  refreshToken  String   @db.Text  // Store OAuth refresh token
  expiresAt     DateTime // Token expiration
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id]) 
  @@index([userId])
}

model Zap {
  id          String @id @default(uuid())
  triggerId   String 
  userId      Int
  trigger     Trigger?
  actions     Action[]
  ZapRuns     ZapRun[]
  user        User @relation(fields: [userId], references: [id])
}

model Trigger {
  id          String @id @default(uuid())
  zapId       String @unique
  triggerId   String
  metadata    Json   @default("{}")
  type        AvailableTrigger @relation(fields: [triggerId], references: [id])
  zap         Zap                 @relation(fields: [zapId], references: [id])
}

model Action {
   id               String @id @default(uuid())
   zapId            String
   zap              Zap    @relation(fields: [zapId], references: [id])
   actionId         String
   metadata         Json  @default("{}")
   type             AvailableAction @relation(fields: [actionId], references: [id])
   sortringOrder    Int @default(0)

}

model AvailableAction {
 id     String @id @default(uuid())
 name   String
 image  String?
 action Action[]
}


model AvailableTrigger {
  id        String @id @default(uuid())
  name      String
  image     String?
  triggers Trigger[]
}

model ZapRun {
  id       String @id @default(uuid())
  zapId    String
  metadata Json
  zap      Zap     @relation(fields: [zapId], references: [id])
  zapRunOutBox  ZapRunOutBox?
  transaction   Transaction[]
}
model ZapRunOutBox {
  id       String @id @default(uuid())
  zapRunId String @unique
  zapRun    ZapRun @relation(fields: [zapRunId], references: [id])
}
model Transaction {
  id          Int @id @default(autoincrement())
  zapRunId    String @unique
  txSignature String
  type        String
  status      String
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
  zaprun      ZapRun   @relation(fields: [zapRunId], references: [id]) 
}